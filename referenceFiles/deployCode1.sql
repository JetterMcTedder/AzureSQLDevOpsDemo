/*
Deployment script for tttt

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "tttt"
:setvar DefaultFilePrefix "tttt"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
PRINT N'Creating SqlSchema [FinancialApp]...';


GO
CREATE SCHEMA [FinancialApp]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating SqlTable [FinancialApp].[Currency]...';


GO
CREATE TABLE [FinancialApp].[Currency] (
    [currencyCode] CHAR (3)       NOT NULL,
    [currencyName] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([currencyCode] ASC)
);


GO
PRINT N'Creating SqlTable [FinancialApp].[CurrencyConversion]...';


GO
CREATE TABLE [FinancialApp].[CurrencyConversion] (
    [id]                 INT             NOT NULL,
    [sourceCurrency]     CHAR (3)        NOT NULL,
    [destCurrency]       CHAR (3)        NOT NULL,
    [conversionRate]     DECIMAL (10, 4) NOT NULL,
    [effectiveDate]      DATETIME        NOT NULL,
    [lastModifiedUserId] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating SqlTable [FinancialApp].[Sales]...';


GO
CREATE TABLE [FinancialApp].[Sales] (
    [id]         INT      NOT NULL,
    [amount]     MONEY    NOT NULL,
    [currency]   CHAR (3) NOT NULL,
    [customerId] INT      NOT NULL,
    [employeeId] INT      NOT NULL,
    [itemId]     INT      NOT NULL,
    [date]       DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating SqlTable [FinancialApp].[UserInfo]...';


GO
CREATE TABLE [FinancialApp].[UserInfo] (
    [userId] INT           NOT NULL,
    [name]   VARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([userId] ASC)
);


GO
PRINT N'Creating SqlForeignKeyConstraint unnamed constraint on [FinancialApp].[CurrencyConversion]...';


GO
WAITFOR DELAY '00:00.010';

ALTER TABLE [FinancialApp].[CurrencyConversion] WITH NOCHECK
    ADD FOREIGN KEY ([destCurrency]) REFERENCES [FinancialApp].[Currency] ([currencyCode]);


GO
PRINT N'Creating SqlForeignKeyConstraint unnamed constraint on [FinancialApp].[CurrencyConversion]...';


GO
WAITFOR DELAY '00:00.010';

ALTER TABLE [FinancialApp].[CurrencyConversion] WITH NOCHECK
    ADD FOREIGN KEY ([lastModifiedUserId]) REFERENCES [FinancialApp].[UserInfo] ([userId]);


GO
PRINT N'Creating SqlForeignKeyConstraint unnamed constraint on [FinancialApp].[CurrencyConversion]...';


GO
WAITFOR DELAY '00:00.010';

ALTER TABLE [FinancialApp].[CurrencyConversion] WITH NOCHECK
    ADD FOREIGN KEY ([sourceCurrency]) REFERENCES [FinancialApp].[Currency] ([currencyCode]);


GO
PRINT N'Creating SqlForeignKeyConstraint [FinancialApp].[validCurrency]...';


GO
WAITFOR DELAY '00:00.010';

ALTER TABLE [FinancialApp].[Sales] WITH NOCHECK
    ADD CONSTRAINT [validCurrency] FOREIGN KEY ([currency]) REFERENCES [FinancialApp].[Currency] ([currencyCode]);


GO
PRINT N'Creating SqlScalarFunction [FinancialApp].[ConvertCurrency]...';


GO
CREATE FUNCTION FinancialApp.ConvertCurrency(
    @rate DECIMAL(10,4),
    @amount MONEY)
RETURNS MONEY
AS
BEGIN
    DECLARE @NewAmount MONEY;
    SELECT @NewAmount = @amount * @rate;
    RETURN @NewAmount;
END;
GO
PRINT N'Creating SqlInlineTableValuedFunction [FinancialApp].[ConvertCurrencyUsingLookup]...';


GO

CREATE FUNCTION FinancialApp.ConvertCurrencyUsingLookup(
     @sourceCurrency CHAR(3),
     @destCurrency CHAR(3),
     @amount MONEY)
RETURNS TABLE
AS
RETURN
    SELECT amount = conversionRate * @amount
     FROM FinancialApp.CurrencyConversion
    WHERE sourceCurrency = @sourceCurrency
      AND destCurrency = @destCurrency;
GO
PRINT N'Creating SqlInlineTableValuedFunction [FinancialApp].[Report]...';


GO

CREATE FUNCTION FinancialApp.Report (
    @currency CHAR(3)
) 
RETURNS TABLE
AS
RETURN 
   SELECT cc.amount, @currency currency,
          customerId, employeeId, itemId, date
     FROM FinancialApp.Sales s
    CROSS APPLY FinancialApp.ConvertCurrencyUsingLookup(s.currency, @currency, s.amount) cc;
GO
PRINT N'Creating SqlProcedure [FinancialApp].[HistoricalReport]...';


GO
----------------------------------------------------------------------------
-- Example 5
CREATE PROCEDURE FinancialApp.HistoricalReport
   @currency CHAR(3)
AS
BEGIN
   RETURN 0;
END;
GO
PRINT N'Creating SqlProcedure [FinancialApp].[CurrentReport]...';


GO

CREATE PROCEDURE FinancialApp.CurrentReport
   @currency CHAR(3)
AS
BEGIN
   RETURN 0;
END;
GO
PRINT N'Creating SqlProcedure [FinancialApp].[SalesReport]...';


GO

CREATE PROCEDURE FinancialApp.SalesReport
   @currency CHAR(3),
   @showHistory BIT = 0
AS
BEGIN
   IF(@showHistory = 0)
     EXEC FinancialApp.CurrentReport @currency;
   ELSE
     EXEC FinancialApp.HistoricalReport @currency;
   RETURN 0;
END;
GO
